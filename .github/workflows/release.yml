name: Go
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v1
    - name: Set up Go 1.17
      uses: actions/setup-go@v3
      with:
        go-version: '1.17'
        check-latest: true
        cache: true
      id: go
    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build
      run: |
        CGO_ENABLED=0 GOOS=linux GARCH=amd64 go build -a --installsuffix cgo --ldflags="-w -s -X main.Build=$GITHUB_SHA" -o GoGitBackup_linux_amd64
        CGO_ENABLED=0 GOOS=linux GARCH=386 go build -a --installsuffix cgo --ldflags="-w -s -X main.Build=$GITHUB_SHA" -o GoGitBackup_linux_386
        CGO_ENABLED=0 GOOS=linux GARCH=arm go build -a --installsuffix cgo --ldflags="-w -s -X main.Build=$GITHUB_SHA" -o GoGitBackup_linux_arm
        CGO_ENABLED=0 GOOS=windows GARCH=386 go build -a --installsuffix cgo --ldflags="-w -s -X main.Build=$GITHUB_SHA" -o GoGitBackup.exe
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -a --installsuffix cgo --ldflags="-w -s -X main.Build=$GITHUB_SHA" -o GoGitBackup_osx
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset AMD64
      id: upload-release-asset_linux_amd64 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./GoGitBackup_linux_amd64
        asset_name: GoGitBackup_linux_amd64
        asset_content_type: application/x-elf
    - name: Upload Release Asset 386
      id: upload-release-asset_linux_386 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./GoGitBackup_linux_386
        asset_name: GoGitBackup_linux_386
        asset_content_type: application/x-elf
    - name: Upload Release Asset ARM
      id: upload-release-asset_linux_arm
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./GoGitBackup_linux_arm
        asset_name: GoGitBackup_linux_arm
        asset_content_type: application/x-elf
    - name: Upload Release Asset WIN
      id: upload-release-asset_windows
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./GoGitBackup.exe
        asset_name: GoGitBackup.exe
        asset_content_type: application/x-msdownload    
    - name: Upload Release Asset OSX
      id: upload-release-asset_osx
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./GoGitBackup_osx
        asset_name: GoGitBackup_osx
        asset_content_type: application/x-elf
